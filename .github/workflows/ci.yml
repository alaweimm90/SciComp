name: Berkeley SciComp CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  BERKELEY_SCICOMP_QUIET: "1"  # Disable banner in CI

jobs:
  # =============================================================================
  # Code Quality and Linting
  # =============================================================================
  
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Run Black formatting check
      run: black --check --diff Python/ tests/ examples/
      
    - name: Run isort import sorting check
      run: isort --check-only --diff Python/ tests/ examples/
      
    - name: Run flake8 linting
      run: flake8 Python/ tests/ examples/
      
    - name: Run mypy type checking
      run: mypy Python/ --ignore-missing-imports
      
    - name: Run bandit security scan
      run: bandit -r Python/ -f json -o security-report.json
      continue-on-error: true
      
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: security-report.json

  # =============================================================================
  # Python Testing Matrix
  # =============================================================================
  
  test-python:
    name: Python Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev libnetcdf-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
        
    - name: Run pytest with coverage
      run: |
        pytest tests/python/ -v --cov=Python --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python-${{ matrix.python-version }}-${{ matrix.os }}
        name: codecov-umbrella

  # =============================================================================
  # MATLAB Testing (if available)
  # =============================================================================
  
  test-matlab:
    name: MATLAB Tests
    runs-on: ubuntu-latest
    if: false  # Disable by default as requires MATLAB license
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up MATLAB
      uses: matlab-actions/setup-matlab@v1
      with:
        release: R2023a
        
    - name: Run MATLAB tests
      uses: matlab-actions/run-tests@v1
      with:
        test-results-junit: matlab-test-results.xml
        code-coverage-cobertura: matlab-coverage.xml
        
    - name: Upload MATLAB test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: matlab-test-results
        path: matlab-test-results.xml

  # =============================================================================
  # Documentation Building
  # =============================================================================
  
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .[docs]
        
    - name: Build Sphinx documentation
      run: |
        cd docs
        make html
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

  # =============================================================================
  # Performance Benchmarks
  # =============================================================================
  
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
        
    - name: Run benchmarks
      run: |
        pytest tests/python/ -v --benchmark-only --benchmark-json=benchmark-results.json
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  # =============================================================================
  # Security Scanning
  # =============================================================================
  
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # Package Building and Testing
  # =============================================================================
  
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, test-python]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for setuptools_scm
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: python -m build
      
    - name: Check package
      run: twine check dist/*
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  # =============================================================================
  # Integration Testing
  # =============================================================================
  
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/
        
    - name: Install package from wheel
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl
        
    - name: Test package import
      run: |
        python -c "import Python; print(Python.__version__)"
        python -c "from Python import quantum_physics; print('Quantum physics module loaded')"
        python -c "from Python import ml_physics; print('ML physics module loaded')"
        
    - name: Run integration examples
      run: |
        python examples/python/quantum_tunneling_demo.py --quick-test
        python examples/python/ml_physics_demo.py --quick-test

  # =============================================================================
  # Deployment (only on main branch tags)
  # =============================================================================
  
  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [quality, test-python, docs, build, integration]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: pypi
      url: https://pypi.org/p/berkeley-scicomp
      
    permissions:
      id-token: write  # For trusted publishing
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/

  # =============================================================================
  # Notification and Reporting
  # =============================================================================
  
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality, test-python, docs, build]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.quality.result == 'success' && needs.test-python.result == 'success'
      run: |
        echo "✅ Berkeley SciComp CI passed successfully!"
        echo "🐻💙💛 Go Bears!"
        
    - name: Notify failure
      if: needs.quality.result == 'failure' || needs.test-python.result == 'failure'
      run: |
        echo "❌ Berkeley SciComp CI failed"
        echo "Please check the logs and fix issues"