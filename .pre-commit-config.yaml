# Berkeley SciComp Framework - Pre-commit Configuration
# ====================================================
#
# Pre-commit hooks for maintaining code quality, security, and Berkeley
# standards in the UC Berkeley Scientific Computing Framework.
#
# Author: Dr. Meshal Alawein (meshal@berkeley.edu)
# Institution: University of California, Berkeley
# Created: 2025

# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

repos:
  # =============================================================================
  # General Code Quality
  # =============================================================================
  
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Basic file checks
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--multi]
      - id: check-toml
      - id: check-json
      - id: pretty-format-json
        args: [--autofix, --indent=2]
      
      # Security and safety
      - id: check-private-key
      - id: detect-aws-credentials
      - id: detect-private-key
      
      # Code structure
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: destroyed-symlinks
      
      # Python specific
      - id: check-ast
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]

  # =============================================================================
  # Python Code Formatting and Quality
  # =============================================================================
  
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]
        files: ^Python/.*\.py$|^tests/.*\.py$|^examples/.*\.py$

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]
        files: ^Python/.*\.py$|^tests/.*\.py$|^examples/.*\.py$

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]
        files: ^Python/.*\.py$|^tests/.*\.py$|^examples/.*\.py$
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bugbear

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        args: [--ignore-missing-imports, --show-error-codes]
        files: ^Python/.*\.py$
        additional_dependencies:
          - types-requests
          - types-setuptools

  # =============================================================================
  # Security Scanning
  # =============================================================================
  
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, -f, json, -o, bandit-report.json]
        files: ^Python/.*\.py$

  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: |
          (?x)^(
            .*\.lock$|
            .*\.log$|
            .*\.min\.js$|
            .*\.map$|
            package-lock\.json$
          )$

  # =============================================================================
  # Documentation and Markdown
  # =============================================================================
  
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        args: [--fix, --disable, MD013, MD033, MD041]
        files: \.md$

  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.10.0
    hooks:
      - id: rst-backticks
      - id: rst-directive-colons
      - id: rst-inline-touching-normal

  # =============================================================================
  # YAML and Configuration Files
  # =============================================================================
  
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        args: [-d, relaxed]
        files: \.(yml|yaml)$

  # =============================================================================
  # Berkeley-Specific Checks
  # =============================================================================
  
  - repo: local
    hooks:
      # Check Berkeley visual identity compliance
      - id: berkeley-style-check
        name: Berkeley Style Check
        entry: python
        args: [-c, "
          import sys, re;
          files = [f for f in sys.argv[1:] if f.endswith('.py')];
          for f in files:
            with open(f) as file:
              content = file.read();
              if 'matplotlib' in content and '#003262' not in content and '#FDB515' not in content:
                print(f'Warning: {f} uses matplotlib but may not use Berkeley colors');
          "]
        language: system
        files: ^Python/.*\.py$
        pass_filenames: true

      # Check for proper UC Berkeley attribution
      - id: berkeley-attribution-check
        name: Berkeley Attribution Check
        entry: python
        args: [-c, "
          import sys, re;
          files = [f for f in sys.argv[1:] if f.endswith('.py') and 'examples' in f];
          for f in files:
            with open(f) as file:
              content = file.read();
              if 'Berkeley' not in content and 'UC Berkeley' not in content:
                print(f'Warning: {f} may be missing Berkeley attribution');
          "]
        language: system
        files: ^examples/.*\.py$
        pass_filenames: true

      # Check for academic standards compliance
      - id: academic-standards-check
        name: Academic Standards Check
        entry: python
        args: [-c, "
          import sys, re;
          files = [f for f in sys.argv[1:] if f.endswith('.py')];
          for f in files:
            with open(f) as file:
              content = file.read();
              if 'def ' in content:
                functions = re.findall(r'def ([^(]+)\(', content);
                docstrings = re.findall(r'\"\"\"(.+?)\"\"\"', content, re.DOTALL);
                if len(functions) > len(docstrings):
                  print(f'Warning: {f} may have functions without docstrings');
          "]
        language: system
        files: ^Python/.*\.py$
        pass_filenames: true

  # =============================================================================
  # File Size and Structure Checks
  # =============================================================================
  
  - repo: https://github.com/codingjoe/pre-commit-hooks
    rev: v0.7.0
    hooks:
      - id: check-jupyter-notebook-cleared
        files: \.ipynb$

  - repo: local
    hooks:
      # Prevent large files from being committed
      - id: large-file-check
        name: Large File Check
        entry: python
        args: [-c, "
          import sys, os;
          MAX_SIZE = 10 * 1024 * 1024;  # 10MB
          for f in sys.argv[1:]:
            if os.path.getsize(f) > MAX_SIZE:
              print(f'Error: {f} is larger than 10MB. Use Git LFS for large files.');
              sys.exit(1);
          "]
        language: system
        pass_filenames: true

      # Check for Berkeley-specific directory structure
      - id: berkeley-structure-check
        name: Berkeley Structure Check
        entry: python
        args: [-c, "
          import sys, os;
          required_dirs = ['Python', 'MATLAB', 'Mathematica', 'examples', 'tests', 'docs'];
          missing = [d for d in required_dirs if not os.path.exists(d)];
          if missing:
            print(f'Warning: Missing Berkeley SciComp directories: {missing}');
          "]
        language: system
        files: ^\..*$
        always_run: true

  # =============================================================================
  # Testing and Coverage
  # =============================================================================
  
  - repo: local
    hooks:
      # Run quick tests before commit
      - id: quick-tests
        name: Quick Tests
        entry: python
        args: [-m, pytest, tests/python/, -x, --tb=short, -q]
        language: system
        files: ^(Python/.*\.py|tests/.*\.py)$
        pass_filenames: false

  # =============================================================================
  # License and Copyright Checks
  # =============================================================================
  
  - repo: local
    hooks:
      # Check for proper MIT license headers
      - id: license-check
        name: License Check
        entry: python
        args: [-c, "
          import sys, re;
          files = [f for f in sys.argv[1:] if f.endswith('.py') and not f.startswith('tests/') and '__init__' not in f];
          for f in files:
            with open(f) as file:
              content = file.read();
              if len(content) > 100 and 'MIT' not in content and 'License' not in content:
                print(f'Info: {f} may be missing license information');
          "]
        language: system
        files: ^Python/.*\.py$
        pass_filenames: true

# =============================================================================
# Configuration
# =============================================================================

default_language_version:
  python: python3.11

default_stages: [commit]

# Exclude patterns
exclude: |
  (?x)^(
    .*\.min\.js|
    .*\.map|
    .*\.lock|
    .*/__pycache__/.*|
    .*/\.git/.*|
    .*\.egg-info/.*|
    build/.*|
    dist/.*|
    \.venv/.*|
    venv/.*|
    \.tox/.*|
    \.pytest_cache/.*|
    \.mypy_cache/.*|
    .*\.nb\.bak|
    .*\.pyc|
    gitignore_berkeley\.txt|
    LICENSE\.txt|
    init_berkeley\.py
  )$

# =============================================================================
# Berkeley SciComp Specific Configuration
# =============================================================================

# Minimum Python version for Berkeley SciComp
minimum_pre_commit_version: '3.0.0'

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [quick-tests]  # Skip time-consuming tests in CI
  submodules: false

# =============================================================================
# Installation and Usage Instructions
# =============================================================================

# To install pre-commit hooks:
# pip install pre-commit
# pre-commit install
#
# To run manually:
# pre-commit run --all-files
#
# To update hooks:
# pre-commit autoupdate
#
# Berkeley-specific setup:
# 1. Ensure Berkeley colors are used in matplotlib visualizations
# 2. Include proper UC Berkeley attribution in all files
# 3. Maintain academic documentation standards
# 4. Follow Berkeley visual identity guidelines