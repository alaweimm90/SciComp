[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm>=6.2"]
build-backend = "setuptools.build_meta"
[project]
name = "berkeley-scicomp"
dynamic = ["version"]
description = "SciComp - A Cross-Platform Scientific Computing Suite for Research and Education"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "UC Berkeley SciComp Team", email = "scicomp@berkeley.edu"},
]
maintainers = [
    {name = "Meshal Alawein", email = "meshal@berkeley.edu"},
]
keywords = [
    "berkeley", "scicomp", "quantum", "physics", "scientific-computing",
    "machine-learning", "gpu-acceleration", "thermal-transport",
    "quantum-optics", "spintronics", "materials-science", "climate-modeling",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.20.0",
    "scipy>=1.7.0",
    "matplotlib>=3.3.0",
    "sympy>=1.8",
    "h5py>=3.0.0",
]
[project.optional-dependencies]
gpu = ["cupy-cuda12x>=12.0.0"]
ml = [
    "tensorflow>=2.8.0",
    "torch>=1.11.0",
    "scikit-learn>=1.0.0",
]
performance = [
    "numba>=0.56.0",
    "dask>=2022.0.0",
    "joblib>=1.1.0",
]
visualization = [
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "ipywidgets>=7.6.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "nbsphinx>=0.8.0",
    "jupyter>=1.0.0",
]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.10",
    "pytest-benchmark>=3.4",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.800",
    "pre-commit>=2.15",
]
all = [
    "cupy-cuda12x>=12.0.0",
    "tensorflow>=2.8.0",
    "torch>=1.11.0",
    "scikit-learn>=1.0.0",
    "numba>=0.56.0",
    "dask>=2022.0.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "ipywidgets>=7.6.0",
]
[project.scripts]
berkeley-scicomp = "Python.utils.cli:main"
bsc = "Python.utils.cli:main"
[project.urls]
Homepage = "https://github.com/berkeley/scicomp"
Documentation = "https://berkeley-scicomp.readthedocs.io"
Repository = "https://github.com/berkeley/scicomp"
"Bug Reports" = "https://github.com/berkeley/scicomp/issues"
Changelog = "https://github.com/berkeley/scicomp/blob/main/CHANGELOG.md"
Download = "https://pypi.org/project/berkeley-scicomp/"
[tool.setuptools]
packages = ["Python"]
include-package-data = true
[tool.setuptools.package-data]
"Python" = ["*/data/*.dat", "*/data/*.json", "*/examples/*.py", "*/tests/*.py"]
[tool.setuptools_scm]
write_to = "Python/_version.py"
# Black code formatting
[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
# isort import sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
# Flake8 linting
[tool.flake8]
max-line-length = 100
ignore = ["E203", "W503", "E501"]
per-file-ignores = [
    "__init__.py:F401",
]
# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests as requiring GPU (deselect with '-m \"not gpu\"')",
    "ml: marks tests as requiring ML libraries",
    "integration: marks tests as integration tests",
]
# Coverage configuration
[tool.coverage.run]
source = ["Python"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]